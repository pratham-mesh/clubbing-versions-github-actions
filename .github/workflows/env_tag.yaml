name: Reusable Release-Stage

on:
  workflow_dispatch:

jobs:
  TAGImage:
    runs-on: windows-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Azure CLI
        shell: pwsh
        run: |
          #if (Test-Path "./.azure") {
          #  echo "folder exists"
          #} else {
          #  New-Item -ItemType Directory -Path "./.azure"
          # }

          $env:AZURE_CONFIG_DIR = "${env:GITHUB_WORKSPACE}\.azure"

          az login --service-principal `
            --username "${{ secrets.AZURE_CLIENT_ID }}" `
            --password "${{ secrets.AZURE_CLIENT_SECRET }}" `
            --tenant "${{ secrets.AZURE_TENANT_ID }}"

          $AcrLoginServer = "${{ vars.CONTAINERREPOSITORY }}.azurecr.io"
          $AcrName = "${{ vars.CONTAINERREPOSITORY }}"
          $WorkflowName = "${env:WorkflowName}"
          $BuildNumberOfImage = "WFV_1.0.${env:GITHUB_RUN_NUMBER}-SDKV_1.0.${env:ACI_BUILD_NO}"
          $EnvironmentTag = "${env:environment}"

          $RepositoryName = "$AcrName/$WorkflowName"
          $ImageName = "$AcrName/$WorkflowName"

          $tags = az acr repository show-tags -n $AcrName --repository $RepositoryName --output tsv

          $TagToDelete = ''
          $ImageFound = $false

          foreach ($tag in $tags) {
            if ($tag -like "*$EnvironmentTag*") {
              $TagToDelete = $tag.Trim()
              Write-Host "Tag to be deleted = $TagToDelete"
              $ImageFound = $true
            }
          }

          if ($ImageFound) {
            $ImageToDelete = "$ImageName:$TagToDelete"
            Write-Host "Image to untag - $ImageToDelete"
            az acr repository untag --name $AcrName --image $ImageToDelete
          }

          $SourceImage = "$AcrLoginServer/$AcrName/$WorkflowName:$BuildNumberOfImage"
          $NewImage = "$AcrName/$WorkflowName:$BuildNumberOfImage-$EnvironmentTag"

          Write-Host "Source Image: $SourceImage"
          Write-Host "New Image: $NewImage"

          az acr import --name $AcrName --source $SourceImage --image $NewImage --force
