name: Reusable Release-Stage

on:
  workflow_dispatch:

jobs:
  TAGImage:
    runs-on: windows-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: ACR Tag and Import Simulation (Local)
        shell: pwsh
        run: |
          $env:GITHUB_WORKSPACE = "C:\Test\Cloud_Ethix_ACR"
          $env:GITHUB_RUN_NUMBER = "15"
          $env:ACI_BUILD_NO = "47"
          $env:WorkflowName = "my-new-app"
          $env:environment = "dev"

          $AcrLoginServer = "cloudethixacr.azurecr.io"
          $AcrName = "cloudethixacr"
          $WorkflowName = $env:WorkflowName
          $EnvironmentTag = $env:environment
          $BuildNumberOfImage = "WFV_1.0.${env:GITHUB_RUN_NUMBER}-SDKV_1.0.${env:ACI_BUILD_NO}"
          $RepositoryName = "$WorkflowName"
          $ImageName = "$WorkflowName"

          # Simulated tag list for local testing
          $tags = @(
            "WFV_1.0.15-SDKV_1.0.46-dev",
            "WFV_1.0.15-SDKV_1.0.47-dev",
            "WFV_1.0.15-SDKV_1.0.48-prod"
          )

          $tagToDelete = ''
          $imageFound = $false

          foreach ($tag in $tags) {
            if ($tag -like "*$EnvironmentTag*") {
              $tagToDelete = $tag.Trim().Trim(',').Trim('"')
              Write-Host "Tag to be deleted = $tagToDelete"
              $imageFound = $true
              break
            }
          }

          if ($imageFound) {
            $imageToDelete = "${ImageName}:${tagToDelete}"
            Write-Host "Image to untag = $imageToDelete"
            # Simulate untag
            Write-Host "Simulated untag command: Would untag image $imageToDelete"
          } else {
            Write-Host "No matching image found with environment tag '$EnvironmentTag'"
          }

          $SourceImage = "${AcrLoginServer}/${WorkflowName}:${BuildNumberOfImage}"
          $NewImage = "${WorkflowName}:${BuildNumberOfImage}-${EnvironmentTag}"
          Write-Host "Source Image: $SourceImage"
          Write-Host "New Image: $NewImage"
          # Simulate import
          Write-Host "Simulated import command: Would import image as $NewImage"
